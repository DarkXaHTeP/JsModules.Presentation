doctype html
html(lang="en")
    head
        title JS Modules
        meta(charset="utf-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        link(rel="stylesheet", href="styles/reveal.css")
        link(rel="stylesheet", href="styles/theme/beige.css")
        link(rel="stylesheet", href="lib/css/zenburn.css")
        link(rel="stylesheet", href="styles/styles.css")
    body
        .reveal
            .slides
                section
                    h1 Modules in JavaScript
                    h4 from dark ages to ES2015
                    img(src="images/modules_illustration.jpg")
                section
                    h2 Let's start with simple things
                    img(src="images/java-javascript.jpg")
                section
                    h2 Agenda
                    ul
                        li Global scope
                        li Module pattern
                        li Revealing module pattern
                        li CommonJS modules
                        li Browserify
                        li AMD (RequireJS)
                        li ES2015 (ES6, ES.Next, Harmony) modules
                        li Current state and support
                        li Questions?
                        li Demo overview
                section
                    section
                        h2 Global scope
                        p JavaScript has two scopes: global and local. A variable that is declared outside a function definition is a global variable, and its value is accessible and modifiable throughout your program. A variable that is declared inside a function definition is local.
                    section
                        pre
                            code.js var a = 1; //global variable, becomes a property of window object also
                                |#{''}
                                |function () {
                                |  var b = 2; // local variable
                                |  c = 3; //implicit global variable, will cause Error in strict mode
                                |}
                                |#{''}
                                |console.log(a); //1
                                |console.log(window.a); //1
                                |console.log(b); //undefined
                                |console.log(window.b); //undefined
                                |console.log(c); //3
                                |console.log(window.c); //3
                    section
                        p There are many variables initially defined in global scope
                        img(src="images/Window_object.png")
                        p You can accidently overwrite something
                        p Global variable will not be eligible for collection until the global namespace loses scope.
                    section
                        p Always beware that someone will declare the variable with the same name as yours and the app will work incorrectly
                        img(src="images/unexpected.gif")

                section
                    section
                        h2 How can we deal with it?
                        img(src="images/sceptic_woman.jpg")
                    section
                        h2 Panic
                        img(src="images/yanukovich.gif")
                    section
                        h2 Find the creator of bad code
                        img(src="images/name_conflict.jpg")
                section
                    section
                        h2 Self-executing anonymous function
                        p Creates local scope and executes it immediately
                        pre
                            code.js //Global scope is here
                                |#{''}
                                |(function(){
                                |  //This is the local scope of the function, no globals are created
                                |  var hello = 'Hello World!'
                                |  console.log(hello);
                                |#{''}
                                |//Function is immediatly executed after creation
                                |})();
                    section
                        h2 Module pattern
                        p The most commonly used design pattern and widely accepted in a number of large projects such as jQuery, Dojo, ExtJS and YUI.
                        h4 Pros/Cons
                        p
                            ul
                                li.greened Supports private data
                                li.greened Less clutter in the global namespace
                                li.reded Private methods and functions lose extendability since they are unaccessible.
                    section
                        pre
                            code.js
                                |(function( window, undefined ) {
                                |  function MyModule() {
                                |    // `this` refers to the instance of `MyModule` when created
                                |    this.myMethod = function () {
                                |      alert( 'my method' );
                                |    };
                                |  }
                                |#{''}
                                |  // expose access to the constructor
                                |  window.MyModule = MyModule;
                                |})( window );
                                |#{''}
                                |// example usage
                                |var myModule = new MyModule();
                                |myModule.myMethod(); // alerts "my method"
                    section
                        h2 Revealing module pattern
                        p The only difference from the module pattern is that this pattern was engineered as a way to ensure that all methods and variables are kept private until they are explicitly exposed.
                        h4 Pros/Cons
                        p
                            ul
                                li.greened Supports private data
                                li.greened Less clutter in the global namespace
                                li.greened The syntax of our scripts are even more consistent
                                li.greened Explicitly defined public methods and variables which lead to increased readability
                                li.reded Private methods and functions lose extendability since they are unaccessible.
                    section
                        pre
                            code.js
                                |var myModule = (function( window, undefined ) {
                                |  function myMethod() {
                                |    alert( 'my method' );
                                |  }
                                |#{''}
                                |  // explicitly return public methods when this object is instantiated
                                |  return {
                                |    someMethod : myMethod
                                |  };
                                |} )( window );
                                |#{''}
                                |//  example usage
                                |MyModule.myMethod(); // undefined
                                |MyModule.someMethod(); // alerts "my method"

                section
                    h2 Standardization of the modules
                    p EcmaScript 3 was released in December 1999 and EcmaScript 5 in December 2009. None of them contained the out of the box implementation of the modules. Module pattern interpretation differs from project to project, modules are hard to reuse.
                    img(src="images/gold_standard.jpg")
                section
                    section
                        h2 CommonJS Modules specification
                        img(src="images/CommonJS.png")
                        p The CommonJS group defined a module format to solve JavaScript scope issues by making sure each module is executed in its own namespace. This is achieved by forcing modules to explicitly export those variables it wants to expose to the “universe”, and also by defining those other modules required to properly work.
                    section
                        h2 CommonJS Syntax
                        p To achieve this CommonJS give you two tools:
                            ol
                                li the "require()" function, which allows to import a given module into the current scope.
                                li the "module" object, which allows to export something from the current scope.
                    section
                        img(src="images/show_code.jpg")
                    section
                        h4 math.js
                        pre
                            code.js
                                |exports.add = function() {
                                |    var sum = 0, i = 0, args = arguments, l = args.length;
                                |    while (i < l) {
                                |        sum += args[i++];
                                |    }
                                |    return sum;
                                |};
                        h4 increment.js
                        pre
                            code.js
                                |var add = require('math').add;
                                |module.exports = function(val) {
                                |    return add(val, 1);
                                |};
                        h4 program.js
                        pre
                            code.js
                                |var inc = require('increment');
                                |var a = 1;
                                |inc(a); // 2
                    section
                        h2 Implementations of the spec
                        p CommonJS modules' 'require()' function call will block the execution until the required module will be loaded into the memory and initialized. This approach cannot be used in the browsers, that's why CommonJS modules were applied to the node.js platform and become a standard there for a long time.
                        img(src="images/nodejs.png")
                    section
                        h2 Pros/Cons
                        p
                            ul
                                li.greened Simple syntax - easy to use
                                li.greened Execution in own context. Only explicit variables in the global namespace
                                li.greened Modules format consistent and behavior is predictable
                                li.greened NPM registry contains thousands of modules ready to use
                                li.greened Dependencies can be stubbed during the testing.
                                li.reded Synchronous execution
                                li.reded Not supported in browsers
                                li.reded Implemented in Node.JS only
                section
                    section
                        h2 Any thoughts about browsers?
                        img(src="images/browsers.jpg")
                    section
                        q If the mountain will not come to Mohammed, Mohammed must go to the mountain
                        img(src="images/mountain.jpg")
                section
                    section
                        img(src="images/browserify.png")
                        p Browsers don't have the "require()" method defined, but Node.js does. With Browserify you can write code that uses require in the same way that you would use it in Node by bundling up all of your dependencies into single JavaScript file.
                    section
                        h2 How to use
                        p Install Browserify from NPM
                        pre
                            code.bash npm install -g browserify
                        p Compile CommonJS module with all it's dependencies into bundle
                        pre
                            code.bash browserify main.js --outfile=bundle.js
                    section
                        h2 Pros/Cons
                        p
                            ul
                                li.greened All benefits of CommonJS in browser (and even more with transforms)
                                li.greened Ability to reuse server code (e.g. models, helpers)
                                li.reded Knowledge of the Node.JS platform is recommended
                                li.reded Build step is required
                                li.reded Generated code is hard to read (without source maps)
                section
                    p Not all developers were ready to build their frontend. Not all of the projects have Node.JS as a backend.
                    img(src="images/alternative.jpg")
                section
                    section
                        h2 Here comes AMD
                        img(src="images/amd-chip.jpg")
                    section
                        h2 Asynchronous Module Definition (AMD)
                        p The API specifies a mechanism for defining modules such that the module and its dependencies can be asynchronously loaded. This is particularly well suited for the browser environment.
                    section
                        h4 math.js
                        pre
                            code.js
                                |define([], function() {
                                |  return {
                                |    add: function() {
                                |      var sum = 0, i = 0, args = arguments, l = args.length;
                                |      while (i < l) {
                                |        sum += args[i++];
                                |      }
                                |      return sum;
                                |    };
                                |});
                        h4 increment.js
                        pre
                            code.js
                                |define(['math'], function(math) {
                                |  return function(val) {
                                |    return math.add(val, 1);
                                |  };
                                |});
                        h4 program.js
                        pre
                            code.js
                                |require(['increment'], function(increment) {
                                |  var a = 1;
                                |  inc(a); // 2
                                |});
                    section
                        h2 Relations with CommonJS group
                        p First version of AMD API started on the CommonJS wiki as a transport format, as Modules Transport/C, but it changed over time to also include a module definition API.
                        p Consensus was not reached. The API was transferred over to its own wiki and discussion group.
                    section
                        h2 Existing implementations:
                        p
                            ul
                                li Dojo Toolkit
                                li ScriptManJS
                                li RequireJS
                        img(src="images/requirejs-logo.png")
                    section
                        h2 Pros/Cons
                        p
                            ul
                                li.greened Asynchronous loading
                                li.greened Designed for browsers, but can be used on server as well
                                li.greened Execution in function local scope. Only explicit variables in the global namespace
                                li.greened Modules format consistent and behavior is predictable
                                li.greened Dependencies are loaded only if required
                                li.reded More boilerplate code in comparison to CommonJS
                                li.reded Mocking of dependencies during testing is not easy
                section
                    h2 UMD (Universal Module Definition)
                    p The UMD pattern typically attempts to offer compatibility with the most popular script loaders of the day (e.g RequireJS amongst others). In many cases it uses AMD as a base, with special-casing added to handle CommonJS compatibility.
                    p It is possible to create UMD modules using Browserify:
                    pre
                        code.bash browserify module.js --outfile=myModule.js --standalone
                section
                    blockquote Waiting for out of the box module support in JavaScript
                    img(src="images/waiting-skeleton.jpg")
                section
                    section
                        h2 EcmaScript 2015 modules
                        p The ES2015 (former ES6, ES.Next, Harmony) brought the native modules support to the JavaScript among the many other innovations.
                    section
                        img(src="images/harold.jpg")
                    section
                        h4 math.js
                        pre
                            code.js
                                | export function add() {
                                |    var sum = 0, i = 0, args = arguments, l = args.length;
                                |    while (i < l) {
                                |        sum += args[i++];
                                |    }
                                |    return sum;
                                | };
                        h4 increment.js
                        pre
                            code.js
                                | import { add } from 'math';
                                | export default function(val) {
                                |    return add(val, 1);
                                | };
                        h4 program.js
                        pre
                            code.js
                                | import inc from 'increment';
                                | var a = 1;
                                | inc(a); // 2
                    section
                        h2 Design goals
                        p
                            ul
                                li Exporting of single item is favored over multiple
                                li Static module structure
                                li Support for both synchronous and asynchronous loading
                                li Support for cyclic dependencies between modules
                        img(src="images/design.jpg")
                    section
                        h2 Pros/Cons
                        p
                            ul
                                li.greened Very compact syntax
                                li.greened Static module structure (helps with optimizations, static checking and more)
                                li.greened Hopefully will end the fragmentation between the CommonJS and AMD (no more UMD)
                                li.greened New browser APIs become modules instead of global variables or properties of navigator
                                li.greened No more objects-as-namespaces (such as Math and JSON) for functions in ECMAScript 5
                                li.reded No support in browsers and Node.JS for now
                                li.reded Transpiling to CommonJS/AMD is required. A build step should be introduced
                section
                    h2 Current state
                    p So where the modules will work?
                    table
                        thead
                            tr
                                th Modules
                                th In browser
                                th In Node.JS
                                th In browser (build)
                                th In Node (build)
                        tbody
                            tr
                                td CommonJS
                                td -
                                td +
                                td +
                                td
                            tr
                                td AMD
                                td +
                                td -
                                td +
                                td +
                            tr
                                td UMD
                                td +
                                td +
                                td +
                                td
                            tr
                                td ES2015
                                td -
                                td -
                                td +
                                td +
                section
                    h4 My way of dealing with modules
                    p
                        ul
                            li Use ES2015 syntax for own modules
                            li Use babel transform to transpile modules to CommonJS syntax
                            li Use Browserify to wrap third-party CommonJS dependencies and get bundle
                    pre
                        code.bash browserify src/index.js -t babelify | uglifyjs > public/bundle.js
                    img(src="images/deal-with-it.gif")
                section
                    h2 What to read
                    p
                        ul
                            li
                                a(href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/",target="_blank") Book: Learning JavaScript Design Patterns
                            li
                                a(href="https://nodejs.org/docs/latest/api/modules.html",target="_blank") Node.JS Modules
                            li
                                a(href="http://requirejs.org/docs/api.html",target="_blank") AMD API overview using RequireJS
                            li
                                a(href="http://browserify.org/",target="_blank") Browserify documentation
                            li
                                a(href="https://ponyfoo.com/articles/es6-modules-in-depth",target="_blank") ES6 Modules in Depth
                            li
                                a(href="https://auth0.com/blog/2016/03/15/javascript-module-systems-showdown/",target="_blank") JavaScript Module Systems Showdown: CommonJS vs AMD vs ES2015
                section
                    h2 Questions?
                    img(src="images/questions.gif")
                section
                    h2 Demo overview
                    a(href="https://github.com/DarkXaHTeP/JsModules.Demo") open on GitHub



        script(src="lib/js/head.min.js")
        script(src="scripts/reveal.js")
        script(src="scripts/main.js")